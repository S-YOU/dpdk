type
  rte_cpu_flag_t* = enum
    RTE_CPUFLAG_SSE3 = 0, RTE_CPUFLAG_PCLMULQDQ, RTE_CPUFLAG_DTES64,
    RTE_CPUFLAG_MONITOR, RTE_CPUFLAG_DS_CPL, RTE_CPUFLAG_VMX, RTE_CPUFLAG_SMX,
    RTE_CPUFLAG_EIST, RTE_CPUFLAG_TM2, RTE_CPUFLAG_SSSE3, RTE_CPUFLAG_CNXT_ID,
    RTE_CPUFLAG_FMA, RTE_CPUFLAG_CMPXCHG16B, RTE_CPUFLAG_XTPR, RTE_CPUFLAG_PDCM,
    RTE_CPUFLAG_PCID, RTE_CPUFLAG_DCA, RTE_CPUFLAG_SSE4_1, RTE_CPUFLAG_SSE4_2,
    RTE_CPUFLAG_X2APIC, RTE_CPUFLAG_MOVBE, RTE_CPUFLAG_POPCNT,
    RTE_CPUFLAG_TSC_DEADLINE, RTE_CPUFLAG_AES, RTE_CPUFLAG_XSAVE,
    RTE_CPUFLAG_OSXSAVE, RTE_CPUFLAG_AVX, RTE_CPUFLAG_F16C, RTE_CPUFLAG_RDRAND,
    RTE_CPUFLAG_FPU, RTE_CPUFLAG_VME, RTE_CPUFLAG_DE, RTE_CPUFLAG_PSE,
    RTE_CPUFLAG_TSC, RTE_CPUFLAG_MSR, RTE_CPUFLAG_PAE, RTE_CPUFLAG_MCE,
    RTE_CPUFLAG_CX8, RTE_CPUFLAG_APIC, RTE_CPUFLAG_SEP, RTE_CPUFLAG_MTRR,
    RTE_CPUFLAG_PGE, RTE_CPUFLAG_MCA, RTE_CPUFLAG_CMOV, RTE_CPUFLAG_PAT,
    RTE_CPUFLAG_PSE36, RTE_CPUFLAG_PSN, RTE_CPUFLAG_CLFSH, RTE_CPUFLAG_DS,
    RTE_CPUFLAG_ACPI, RTE_CPUFLAG_MMX, RTE_CPUFLAG_FXSR, RTE_CPUFLAG_SSE,
    RTE_CPUFLAG_SSE2, RTE_CPUFLAG_SS, RTE_CPUFLAG_HTT, RTE_CPUFLAG_TM,
    RTE_CPUFLAG_PBE, RTE_CPUFLAG_DIGTEMP, RTE_CPUFLAG_TRBOBST, RTE_CPUFLAG_ARAT,
    RTE_CPUFLAG_PLN, RTE_CPUFLAG_ECMD, RTE_CPUFLAG_PTM,
    RTE_CPUFLAG_MPERF_APERF_MSR, RTE_CPUFLAG_ACNT2, RTE_CPUFLAG_ENERGY_EFF,
    RTE_CPUFLAG_FSGSBASE, RTE_CPUFLAG_BMI1, RTE_CPUFLAG_HLE, RTE_CPUFLAG_AVX2,
    RTE_CPUFLAG_SMEP, RTE_CPUFLAG_BMI2, RTE_CPUFLAG_ERMS, RTE_CPUFLAG_INVPCID,
    RTE_CPUFLAG_RTM, RTE_CPUFLAG_AVX512F, RTE_CPUFLAG_LAHF_SAHF, RTE_CPUFLAG_LZCNT,
    RTE_CPUFLAG_SYSCALL, RTE_CPUFLAG_XD, RTE_CPUFLAG_1GB_PG, RTE_CPUFLAG_RDTSCP,
    RTE_CPUFLAG_EM64T, RTE_CPUFLAG_INVTSC, RTE_CPUFLAG_NUMFLAGS

proc rte_cpu_get_flag_name*(feature: rte_cpu_flag_t): cstring {.importc, header: "rte_cpuflags.h".}
proc rte_cpu_get_flag_enabled*(feature: rte_cpu_flag_t): cint {.importc, header: "rte_cpuflags.h".}
proc rte_cpu_check_supported*() {.importc, header: "rte_cpuflags.h".}
